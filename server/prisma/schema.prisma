generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id            Int           @id @default(autoincrement())
  postId        Int           @map("post_id")
  userId        Int           @map("user_id")
  description   String
  parentId      Int?          @map("parent_id")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  comment       Comment?      @relation("commentTocomment", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  otherComments Comment[]     @relation("commentTocomment")
  post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instaUser     InstaUser     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  commentLikes  CommentLike[]

  @@map("comment")
}

model CommentLike {
  id        Int       @id @default(autoincrement())
  commentId Int       @map("comment_id")
  userId    Int       @map("user_id")
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instaUser InstaUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([commentId, userId])
  @@map("comment_like")
}

model Follower {
  id                                          Int       @id @default(autoincrement())
  userId                                      Int       @map("user_id")
  followerId                                  Int       @map("follower_id")
  insta_user_follower_follower_idToinsta_user InstaUser @relation("follower_follower_idToinsta_user", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user_follower_user_idToinsta_user     InstaUser @relation("follower_user_idToinsta_user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, followerId])
  @@map("follower")
}

model Hashtag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  postHashtags PostHashtag[]

  @@map("hashtag")
}

model InstaUser {
  id                                        Int           @id @default(autoincrement())
  name                                      String?
  username                                  String        @unique
  email                                     String        @unique
  password                                  String
  createdAt                                 DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                                 DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  avatar                                    String?
  bio                                       String?
  private                                   Boolean       @default(false)
  comments                                  Comment[]
  commentLikes                              CommentLike[]
  follower_follower_follower_idToinsta_user Follower[]    @relation("follower_follower_idToinsta_user")
  follower_follower_user_idToinsta_user     Follower[]    @relation("follower_user_idToinsta_user")
  posts                                     Post[]
  postLikes                                 PostLike[]
  postMentions                              PostMention[]
  savedPosts                                SavedPost[]

  @@map("insta_user")
}

model Post {
  id           Int           @id @default(autoincrement())
  description  String?
  userId       Int           @map("user_id")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  comments     Comment[]
  instaUser    InstaUser     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postHashtags PostHashtag[]
  postLikes    PostLike[]
  postMedias   PostMedia[]
  postMentions PostMention[]
  savedPosts   SavedPost[]

  @@map("post")
}

model PostHashtag {
  id        Int     @id @default(autoincrement())
  postId    Int     @map("post_id")
  hashtagId Int     @map("hashtag_id")
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("post_hashtag")
}

model PostLike {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instaUser InstaUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([postId, userId])
  @@map("post_like")
}

model PostMedia {
  id       Int    @id @default(autoincrement())
  postId   Int    @map("post_id")
  mediaUrl String @map("media_url")
  sort     Int    @db.SmallInt
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([postId, sort])
  @@map("post_media")
}

model PostMention {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instaUser InstaUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("post_mention")
}

model RefreshToken {
  token     String    @id
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("refresh_token")
}

model SavedPost {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  instaUser InstaUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([postId, userId])
  @@map("saved_post")
}
