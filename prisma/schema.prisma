generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  id            Int            @id @default(autoincrement())
  post_id       Int
  user_id       Int
  description   String
  parent_id     Int?
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  updated_at    DateTime       @default(now()) @db.Timestamp(6)
  comment       comment?       @relation("commentTocomment", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comment comment[]      @relation("commentTocomment")
  post          post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user    insta_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment_like  comment_like[]
}

model comment_like {
  id         Int        @id @default(autoincrement())
  comment_id Int
  user_id    Int
  comment    comment    @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user insta_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([comment_id, user_id])
}

model follower {
  id                                          Int        @id @default(autoincrement())
  user_id                                     Int
  follower_id                                 Int
  insta_user_follower_follower_idToinsta_user insta_user @relation("follower_follower_idToinsta_user", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user_follower_user_idToinsta_user     insta_user @relation("follower_user_idToinsta_user", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, follower_id])
}

model hashtag {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  post_hashtag post_hashtag[]
}

model insta_user {
  id                                        Int            @id @default(autoincrement())
  name                                      String?
  username                                  String         @unique
  email                                     String         @unique
  password                                  String
  created_at                                DateTime       @default(now()) @db.Timestamp(6)
  updated_at                                DateTime       @default(now()) @db.Timestamp(6)
  avatar                                    String?
  bio                                       String?
  private                                   Boolean        @default(false)
  comment                                   comment[]
  comment_like                              comment_like[]
  follower_follower_follower_idToinsta_user follower[]     @relation("follower_follower_idToinsta_user")
  follower_follower_user_idToinsta_user     follower[]     @relation("follower_user_idToinsta_user")
  post                                      post[]
  post_like                                 post_like[]
  post_mention                              post_mention[]
  saved_post                                saved_post[]
}

model post {
  id           Int            @id @default(autoincrement())
  description  String?
  user_id      Int
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  comment      comment[]
  insta_user   insta_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post_hashtag post_hashtag[]
  post_like    post_like[]
  post_media   post_media[]
  post_mention post_mention[]
  saved_post   saved_post[]
}

model post_hashtag {
  id         Int     @id @default(autoincrement())
  post_id    Int
  hashtag_id Int
  hashtag    hashtag @relation(fields: [hashtag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post       post    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_like {
  id         Int        @id @default(autoincrement())
  post_id    Int
  user_id    Int
  post       post       @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user insta_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}

model post_media {
  id        Int    @id @default(autoincrement())
  post_id   Int
  media_url String
  sort      Int    @db.SmallInt
  post      post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, sort])
}

model post_mention {
  id         Int        @id @default(autoincrement())
  post_id    Int
  user_id    Int
  post       post       @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user insta_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model refresh_token {
  token      String    @id
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model saved_post {
  id         Int        @id @default(autoincrement())
  post_id    Int
  user_id    Int
  post       post       @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  insta_user insta_user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}
